# MNIST Training Experiment

```{=html}
<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="usage-tab" data-bs-toggle="tab" data-bs-target="#usage" type="button" role="tab">Usage</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="api-tab" data-bs-toggle="tab" data-bs-target="#api" type="button" role="tab">API</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="contributing-tab" data-bs-toggle="tab" data-bs-target="#contributing" type="button" role="tab">Contributing</button>
  </li>
</ul>
```

## Project Overview

The MNIST Training Experiment is a PyTorch-based handwritten digit recognition experiment template that supports training and result comparison across multiple computing environments.
This project aims to provide a reproducible machine learning experiment example, particularly suitable for teaching and computational science research.

## Features

- Train MNIST handwritten digit recognition CNN models with PyTorch
- Support for training in CPU, CUDA, and MPS (Apple Silicon) environments
- Environment isolation and dependency management with Pixi
- Automatic creation of separate directories for training results and models in different environments
- MLflow integration for experiment tracking and result visualization
- Data and model hash verification to ensure experiment reproducibility
- Detailed training process and result recording and analysis
- Cross-platform reproducibility verification

## Installation

This project uses [Pixi](https://pixi.sh) for environment management and supports the following environments:

```bash
# Install CPU environment
pixi install

# Install CUDA environment (GPU acceleration)
pixi install --environment cuda

# Install MPS environment (Apple Silicon GPU acceleration)
pixi install --environment mps
```

## Quick Start

```bash
# Prepare data
pixi run prepare-data

# Train model (CPU environment)
pixi run train-model

# Test model (CPU environment)
pixi run test-model

# Train with CUDA acceleration (if available)
pixi run --environment cuda train-model
``` 