[workspace]
name = "mnist"
description = "A simple MNIST example based on pytorch."
authors = [
    "Jing-Yilin <yilin.jing.ai@outlook.com>",
    "Wisup Team <team@wisup.ai>",
]
channels = ["conda-forge", "pytorch"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]
version = "0.1.0"


[dependencies]
python = { version = ">=3.10,<3.13", channel = "conda-forge" }
pytorch = { version = ">=2.0.0", channel = "pytorch" }
libjpeg-turbo = { version = ">=3.0.0", channel = "conda-forge" }
libpng = { version = ">=1.6.0", channel = "conda-forge" }
torchvision = { version = ">=0.16.0", channel = "pytorch" }
mlflow = { version = ">=2.8.0", channel = "conda-forge" }
protobuf = { version = ">=3.20.0", channel = "conda-forge" }
pillow = { version = ">=10.0.0", channel = "conda-forge" }
numpy = { version = ">=1.24.0,<2.0.0", channel = "conda-forge" }
matplotlib = { version = ">=3.7.0", channel = "conda-forge" }
scikit-learn = { version = ">=1.3.0", channel = "conda-forge" }
ipykernel = { version = ">=6.25.0", channel = "conda-forge" }
jupyter = { version = ">=1.0.0", channel = "conda-forge" }
pandas = { version = ">=2.0.0", channel = "conda-forge" }
seaborn = { version = ">=0.12.0", channel = "conda-forge" }

[tasks]
prepare-data = "python scripts/download_data.py"
clean-data = { cmd = "rm -rf data" }
clean-results = { cmd = "rm -rf results" }
clean-models = { cmd = "rm -rf models" }
clean-all = { depends-on = ["clean-data", "clean-results", "clean-models"] }
# Run with: pixi run train-model
# Or with CUDA: pixi run --environment cuda train-model
train-model = { cmd = "python train.py --save-model" }
# Run with: pixi run test-model
test-model = { cmd = "python test.py --model-path models/$PIXI_ENVIRONMENT_NAME/mnist_cnn.pt" }

docs = "cd docs; quarto render"
install-quarto-extensions = '''
cd docs;
quarto add quarto-ext/fontawesome;
quarto install extension grantmcdermott/quarto-revealjs-clean;
quarto install extension mikemahoney218/quarto-arxiv;
quarto install tinytex;
'''

# Services
serve-mlflow = { cmd = "mlflow ui --port 5000" }
serve-project-page = { cmd = "cd docs/project-page && quarto preview" }
serve-docs = { cmd = "cd docs && quarto preview" }

# Launch all services at once
[tasks.serve-all]
cmd = '''
#!/bin/bash
mlflow ui --port 5000 &
cd docs && quarto preview &
wait
'''

[tasks.update-data-hash]
cmd = "python scripts/file_hash.py -m update -r -p \"*.gz\" data"
depends-on = ["prepare-data"]

[tasks.verify-data-hash]
cmd = "python scripts/file_hash.py -m verify -r -p \"*.gz\" data"
depends-on = ["prepare-data"]

[tasks.update-model-hash]
cmd = "python scripts/file_hash.py -m update -r models/$PIXI_ENVIRONMENT_NAME"
depends-on = ["train-model"]

[tasks.verify-model-hash]
cmd = "python scripts/file_hash.py -m verify -r models/$PIXI_ENVIRONMENT_NAME"
depends-on = ["train-model"]

[tasks.update-result-hash]
cmd = "python scripts/file_hash.py -m update -r results/$PIXI_ENVIRONMENT_NAME"
depends-on = ["test-model"]

[tasks.verify-result-hash]
cmd = "python scripts/file_hash.py -m verify -r results/$PIXI_ENVIRONMENT_NAME"
depends-on = ["test-model"]

[tasks.experiment]
depends-on = [
    # "clean-all",
    "prepare-data",
    "update-data-hash",
    "train-model",
    "test-model",
    "update-model-hash",
    "update-result-hash",
]

[tasks.reproduction]
depends-on = [
    # "clean-all",
    "prepare-data",
    "verify-data-hash",
    "train-model",
    "test-model",
    "verify-model-hash",
    "verify-result-hash",
]

[feature.cpu]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[feature.cpu.tasks]
train-model = { cmd = "python train.py --save-model --no-cuda --no-mps" }
test-model = { cmd = "python test.py --model-path models/$PIXI_ENVIRONMENT_NAME/mnist_cnn.pt --no-cuda --no-mps" }

[feature.cuda]
dependencies = { cuda = ">=12.0", cudnn = ">=9.8.0" }
platforms = ["win-64", "linux-64"]
system-requirements = { cuda = "12" }
channels = [
    "nvidia",
    { channel = "pytorch", priority = -1 },
] # Results in:  ["nvidia", "conda-forge", "pytorch"] when the default is `conda-forge`

[feature.cuda.tasks]
train-model = { cmd = "python train.py --save-model" }
test-model = { cmd = "python test.py --model-path models/$PIXI_ENVIRONMENT_NAME/mnist_cnn.pt" }

[feature.mps]
platforms = ["osx-arm64"]

[feature.mps.tasks]
train-model = { cmd = "python train.py --save-model --no-cuda" }
test-model = { cmd = "python test.py --model-path models/$PIXI_ENVIRONMENT_NAME/mnist_cnn.pt --no-cuda" }

[environments]
default = { solve-group = "cpu", features = ["cpu"] }
cpu = { solve-group = "cpu", features = ["cpu"] }
cuda = { solve-group = "cuda", features = ["cuda"] }
mps = { solve-group = "mps", features = ["mps"] }